trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  azureSubscription: 'Janco International - Dev'
  buildConfiguration: 'Release'
  dotnetSdkVersion: '6.0.x'
  clientAppName: 'tymr-client'
  apiAppName: 'tymr-api'
  artifactPath: 'deploy-packages'

jobs:
- job: BuildAndTest
  displayName: 'Build and Test Application'
  steps:
    - checkout: self
    
    # Setup .NET SDK
    - task: UseDotNet@2
      displayName: 'Setup .NET SDK'
      inputs:
        version: $(dotnetSdkVersion)
        packageType: sdk

    # Restore NuGet packages for all projects
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    # Build solution excluding test projects to avoid unnecessary builds
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'
        excludeProjects: '**/*Tests.csproj'

    # Run tests
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect "Code coverage"'
        publishTestResults: true


    # Compiles and packages application, preparing it for deployment or distribution
    # The DotNetCoreCLI@2 task does the heavy lifting of compiling and packaging the
    # application according to the .csproj or .sln configurations and dependencies.
    # It makes the app ready for deployment by creating a set of deployable files.

    # Publish Client Application
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        projects: '**/Tymr.Client.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/client'
        zipAfterPublish: True
    
    # Publish API
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        projects: '**/Tymr.Api.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'
        zipAfterPublish: True
    
    # Publishes the packaged application as an artifact
    # The PublishPipelineArtifact@1 task doesn't interact with application code
    # directly. Instead, it's focused on the DevOps process, ensuring that the
    # output of the build process (i.e., the files generated by dotnet publish)
    # is available as an artifact. This artifact can be used later in the pipeline,
    # such as for deployment to different environments or for archival purposes.

    # Publish Client Artifact
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/client' 
        artifactName: 'TymrClient'

    # Publish API Artifact
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/api' 
        artifactName: 'TymrApi'

# Deploy Client to Azure Web App
- job: DeployClient
  displayName: 'Deploy Client Application'
  dependsOn: BuildAndTest
  condition: succeeded()
  steps:
    - download: current
      artifact: '$(artifactPath)/TymrClient'
    - task: AzureWebApp@1
      displayName: 'Deploy Client to Azure Web App'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webApp'
        appName: $(clientAppName)
        package: '$(Pipeline.Workspace)/TymrClient/**/*.zip'

# Deploy API to Azure Web App
- job: DeployAPI
  displayName: 'Deploy API '
  dependsOn: BuildAndTest
  condition: succeeded()
  steps:
    - download: current
      artifact: '$(artifactPath)/TymrApi'
    - task: AzureWebApp@1
      displayName: 'Deploy API to Azure Web App'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webApp'
        appName: $(apiAppName)
        package: '$(Pipeline.Workspace)/TymrApi/**/*.zip'

